#!/usr/bin/env python3
"""
üìã GESTOR DE COTIZACIONES - Marketing a tu Puerta
=================================================
Sistema para gestionar cotizaciones rechazadas y seguimiento
"""

import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import json
import os

class CotizacionesManager:
    def __init__(self):
        """Inicializar gestor de cotizaciones"""
        self.cotizaciones_rechazadas = {
            'CLINICENTRO': {
                'valor_propuesto': 25000,
                'fecha_rechazo': '28 Julio 2025',
                'motivo_rechazo': 'Presupuesto muy alto para su budget actual',
                'contacto': 'Dr. Martinez - direccion@clinicentro.cl',
                'observaciones': 'Mostraron inter√©s pero necesitan una propuesta m√°s econ√≥mica',
                'oportunidad_reconversion': 85,
                'propuesta_alternativa': 'Plan b√°sico por $15,000',
                'fecha_recontacto': '15 Agosto 2025'
            },
            'PLASTICA LASER': {
                'valor_propuesto': 18000,
                'fecha_rechazo': '30 Julio 2025', 
                'motivo_rechazo': 'Timeline de desarrollo muy extenso (12 semanas)',
                'contacto': 'Dra. Fernandez - contacto@plasticalaser.cl',
                'observaciones': 'Urgencia por lanzar antes de septiembre',
                'oportunidad_reconversion': 70,
                'propuesta_alternativa': 'MVP en 6 semanas por $12,000',
                'fecha_recontacto': '10 Agosto 2025'
            },
            'NUEVA MASVIDA': {
                'valor_propuesto': 22000,
                'fecha_rechazo': '01 Agosto 2025',
                'motivo_rechazo': 'Requieren menos funcionalidades que las propuestas',
                'contacto': 'Sr. Rodriguez - gerencia@nuevamasvida.cl',
                'observaciones': 'Solo necesitan landing page + formularios b√°sicos',
                'oportunidad_reconversion': 90,
                'propuesta_alternativa': 'Landing optimizada por $8,000',
                'fecha_recontacto': '05 Agosto 2025'
            }
        }
    
    def mostrar_resumen_cotizaciones(self):
        """Mostrar resumen de cotizaciones rechazadas"""
        st.subheader("üìã Resumen de Cotizaciones Rechazadas")
        
        # M√©tricas generales
        col1, col2, col3, col4 = st.columns(4)
        
        total_rechazadas = len(self.cotizaciones_rechazadas)
        valor_total_perdido = sum(
            [cot['valor_propuesto'] for cot in self.cotizaciones_rechazadas.values()]
        )
        if total_rechazadas:
            oportunidad_promedio = (
                sum(
                    [
                        cot['oportunidad_reconversion']
                        for cot in self.cotizaciones_rechazadas.values()
                    ]
                )
                / total_rechazadas
            )
        else:
            oportunidad_promedio = 0
        valor_potencial_recuperacion = sum(
            [
                int(cot['propuesta_alternativa'].split('$')[1].split(',')[0].replace('.', ''))
                for cot in self.cotizaciones_rechazadas.values()
                if '$' in cot['propuesta_alternativa']
            ]
        )
        
        with col1:
            st.metric("‚ùå Total Rechazadas", total_rechazadas)
        
        with col2:
            st.metric("üí∏ Valor Perdido", f"${valor_total_perdido:,}")
        
        with col3:
            st.metric("üéØ Oportunidad Promedio", f"{oportunidad_promedio:.0f}%")
        
        with col4:
            st.metric("üí∞ Recuperaci√≥n Potencial", f"${valor_potencial_recuperacion:,}")
    
    def mostrar_detalle_cotizaciones(self):
        """Mostrar detalle de cada cotizaci√≥n rechazada"""
        st.subheader("üîç Detalle de Cotizaciones Rechazadas")
        
        for cliente, datos in self.cotizaciones_rechazadas.items():
            with st.expander(f"üî¥ {cliente} - ${datos['valor_propuesto']:,}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**üìÖ Informaci√≥n General:**")
                    st.write(f"‚Ä¢ **Fecha rechazo:** {datos['fecha_rechazo']}")
                    st.write(f"‚Ä¢ **Valor propuesto:** ${datos['valor_propuesto']:,}")
                    st.write(f"‚Ä¢ **Contacto:** {datos['contacto']}")
                    
                    st.write("**‚ùå Motivo del Rechazo:**")
                    st.write(f"‚Ä¢ {datos['motivo_rechazo']}")
                    
                    st.write("**üìù Observaciones:**")
                    st.write(f"‚Ä¢ {datos['observaciones']}")
                
                with col2:
                    st.write("**üéØ Oportunidad de Reconversi√≥n:**")
                    st.progress(datos['oportunidad_reconversion'] / 100)
                    st.write(f"{datos['oportunidad_reconversion']}% probabilidad")
                    
                    st.write("**üí° Propuesta Alternativa:**")
                    st.info(datos['propuesta_alternativa'])
                    
                    st.write("**üìû Fecha Recontacto:**")
                    fecha_recontacto = datetime.strptime(datos['fecha_recontacto'], '%d %B %Y')
                    dias_para_recontacto = (fecha_recontacto - datetime.now()).days
                    
                    if dias_para_recontacto <= 0:
                        st.error(f"‚ö†Ô∏è RECONTACTAR HOY")
                    elif dias_para_recontacto <= 3:
                        st.warning(f"‚è∞ Recontactar en {dias_para_recontacto} d√≠as")
                    else:
                        st.success(f"üìÖ Recontactar en {dias_para_recontacto} d√≠as")
                
                # Acciones
                st.write("**‚ö° Acciones:**")
                col_acc1, col_acc2, col_acc3 = st.columns(3)
                
                with col_acc1:
                    if st.button(f"üìû Recontactar {cliente}", key=f"call_{cliente}"):
                        st.success(f"üìã Recordatorio creado para contactar a {cliente}")
                
                with col_acc2:
                    if st.button(f"‚úèÔ∏è Nueva Propuesta", key=f"proposal_{cliente}"):
                        st.info(f"üìÑ Preparando nueva propuesta para {cliente}")
                
                with col_acc3:
                    if st.button(f"üìß Enviar Email", key=f"email_{cliente}"):
                        st.success(f"‚úâÔ∏è Email programado para {cliente}")
    
    def mostrar_plan_seguimiento(self):
        """Plan de seguimiento para reconversi√≥n"""
        st.subheader("üìà Plan de Seguimiento y Reconversi√≥n")
        
        # Calendario de recontactos
        st.write("**üìÖ Calendario de Recontactos:**")
        
        recontactos = []
        for cliente, datos in self.cotizaciones_rechazadas.items():
            fecha_recontacto = datetime.strptime(datos['fecha_recontacto'], '%d %B %Y')
            recontactos.append({
                'Cliente': cliente,
                'Fecha Recontacto': datos['fecha_recontacto'],
                'D√≠as Restantes': (fecha_recontacto - datetime.now()).days,
                'Oportunidad': f"{datos['oportunidad_reconversion']}%",
                'Propuesta Alternativa': datos['propuesta_alternativa'],
                'Prioridad': 'ALTA' if datos['oportunidad_reconversion'] >= 85 else 'MEDIA'
            })
        
        df_recontactos = pd.DataFrame(recontactos)
        df_recontactos = df_recontactos.sort_values('D√≠as Restantes')
        
        st.dataframe(df_recontactos, use_container_width=True)
        
        # Estrategias espec√≠ficas
        st.write("**üéØ Estrategias de Reconversi√≥n:**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **NUEVA MASVIDA (90% oportunidad):**
            ‚Ä¢ ‚úÖ Propuesta simplificada lista
            ‚Ä¢ üéØ Enfoque en landing + formularios
            ‚Ä¢ üí∞ Reducci√≥n precio: $22k ‚Üí $8k
            ‚Ä¢ ‚è∞ Contactar: 05 Agosto
            """)
            
            st.markdown("""
            **CLINICENTRO (85% oportunidad):**
            ‚Ä¢ ‚úÖ Plan b√°sico preparado  
            ‚Ä¢ üéØ Funcionalidades esenciales
            ‚Ä¢ üí∞ Reducci√≥n precio: $25k ‚Üí $15k
            ‚Ä¢ ‚è∞ Contactar: 15 Agosto
            """)
        
        with col2:
            st.markdown("""
            **PLASTICA LASER (70% oportunidad):**
            ‚Ä¢ ‚úÖ MVP r√°pido propuesto
            ‚Ä¢ üéØ Entrega en 6 semanas
            ‚Ä¢ üí∞ Reducci√≥n precio: $18k ‚Üí $12k  
            ‚Ä¢ ‚è∞ Contactar: 10 Agosto
            """)
    
    def mostrar_metricas_conversion(self):
        """M√©tricas de conversi√≥n y recuperaci√≥n"""
        st.subheader("üìä M√©tricas de Conversi√≥n")
        
        # Potencial de recuperaci√≥n
        valor_original = sum([cot['valor_propuesto'] for cot in self.cotizaciones_rechazadas.values()])
        valor_alternativo = 35000  # 15k + 12k + 8k
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("üí∏ Valor Original Perdido", f"${valor_original:,}")
            st.metric("üí∞ Potencial Recuperaci√≥n", f"${valor_alternativo:,}")
            st.metric("üìà % Recuperaci√≥n", f"{(valor_alternativo/valor_original)*100:.1f}%")
        
        with col2:
            # Gr√°fico de oportunidades
            clientes = list(self.cotizaciones_rechazadas.keys())
            oportunidades = [datos['oportunidad_reconversion'] for datos in self.cotizaciones_rechazadas.values()]
            
            import plotly.express as px
            
            fig = px.bar(x=clientes, y=oportunidades,
                        title="Oportunidad de Reconversi√≥n por Cliente",
                        labels={'x': 'Cliente', 'y': 'Oportunidad (%)'})
            
            fig.update_traces(marker_color=['#ff4444' if x < 75 else '#ffaa44' if x < 85 else '#44ff44' for x in oportunidades])
            
            st.plotly_chart(fig, use_container_width=True)

def main():
    """Funci√≥n principal del gestor de cotizaciones"""
    st.set_page_config(
        page_title="üìã Gestor de Cotizaciones",
        page_icon="üìã",
        layout="wide"
    )
    
    st.title("üìã Gestor de Cotizaciones Rechazadas")
    st.markdown("**Marketing a tu Puerta** - Seguimiento y Reconversi√≥n")
    
    manager = CotizacionesManager()
    
    # Tabs
    tab1, tab2, tab3, tab4 = st.tabs(["üìä Resumen", "üîç Detalle", "üìà Seguimiento", "üìä M√©tricas"])
    
    with tab1:
        manager.mostrar_resumen_cotizaciones()
    
    with tab2:
        manager.mostrar_detalle_cotizaciones()
    
    with tab3:
        manager.mostrar_plan_seguimiento()
    
    with tab4:
        manager.mostrar_metricas_conversion()

if __name__ == "__main__":
    main()